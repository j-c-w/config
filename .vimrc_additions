" This sets up the bundles that are used. See the settings I wrote below this

" ------------------------------------------------------------
"  ---------------------- Vundle Setup ---------------------
" -----------------------------------------------------------
set nocompatible              " be iMproved, required
filetype off                  " required

" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin("$HOME/.vim/VundlePlugins")
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" Keep Plugin commands between vundle#begin/end.
" GUIesq file manager
Bundle 'scrooloose/nerdtree'
" This is for a solarized theme
Bundle 'vim-scripts/Solarized'
" This is for vim latex
" Bundle 'vim-latex/vim-latex'
Bundle 'lervag/vimtex'
" This is for multiple cursor support
Bundle 'terryma/vim-multiple-cursors'
" ALE requires this stuff.
if  has('timers') && exists('*job_start') && exists('*ch_close_in')
	" This is an asychronous linter
	Bundle 'w0rp/ale'
else
	" Otherwise, use an old synchronous linter
	Bundle 'vim-syntastic/syntastic'
endif
" Adds commenting out
Bundle 'tpope/vim-commentary'
" Also add a few language syntaxes that are bundled in
Bundle 'hdima/python-syntax'
Bundle 'derekwyatt/vim-scala'
" Adds a plugin for using the undo tree
Bundle 'mbbill/undotree'
" YCM Requires this:
if (v:version > 704 || (v:version == 704 && has( 'patch1578' )))
	\ && has('timers') && (has('python') || has('python3'))
	" Adds auto completion
	Bundle 'Valloric/YouCompleteMe'
endif
" Add airline for the status bar
Bundle 'vim-airline/vim-airline'
Bundle 'vim-airline/vim-airline-themes'
" Add commands like 'ys' to add surrounding characters
Bundle 'tpope/vim-surround'
" This adds a tag window to look at the ctags
Bundle 'majutsushi/tagbar'
" Add some rainbow parens
Bundle 'junegunn/rainbow_parentheses.vim'
" Adds some commands for ease of motion
Bundle 'easymotion/vim-easymotion'
" This is for running unit tests
" And measuring code coverage
Bundle 'junegunn/vader.vim'
" This provides git status on lines changed
Bundle 'airblade/vim-gitgutter'
" An alternative to FZF for fuzzy finding
Bundle 'ctrlpvim/ctrlp.vim'
" This is my plugin for pinning stuff
Bundle 'j-c-w/vimpin'
" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
" Brief help
" Put your non-Plugin stuff after this line

"  ------------------------------------------------------------------
" ------------------ END OF VUNDLE SETTINGS ---------------------------
"  ------------------------------------------------------------------

" Adds a persistent undo file to the system:
if has("persistent_undo")
    call system('mkdir ' . ' ~/.undodir/')
    set undodir=~/.undodir/
    set undofile
endif

" And map the undo thing to \u
noremap <leader>u :UndotreeToggle<CR>

" For nerd tree, map \n to toggle it
noremap <leader>n :NERDTreeToggle<CR>

" Maps for vimpin
nnoremap <leader>o :<C-U>PinToggle(v:count)<CR>

" Maps for tagbar
nnoremap <leader>t :TagbarToggle<CR>

" For CtrlP, map <C-O> to search all lines
noremap <C-O> :CtrlPLine<CR>

" Maps for multiple cursors. Avoid the default mapping
" because <C-p> is already used by ctrl-p
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-n>'
let g:multi_cursor_prev_key='<C-c>'
let g:multi_cursor_skip_key='<C-x>'
let g:multi_cursor_quit_key='jk'

" Some stuff to set up the rainbow parens:
let g:rainbow#max_level = 16
let g:rainbow#pairs = [['<', '>'], ['(', ')'], ['{', '}'], ['[', ']']]

augroup parens
    autocmd!
    autocmd FileType python,scala,html,java,c,cpp,sml,prolog :RainbowParentheses
augroup END

" Disable ALE for latex files. It is horrendously slow. Asking about it
" upstream I was informed that this is really not a problem. Hmm.
let g:ale_linters = {'tex': []}

" Set the statusline theme:
" Need the laststatus to make the thing work.
let g:airline_theme='base16'
set laststatus=2
set t_Co=256
let g:airline_powerline_fonts = 1
" This sets the buffer tabline
let g:airline#extensions#tabline#enabled = 1

" Add the symbols for the powerliine stuff
if !exists('g:airline_symbols')
    let g:airline_symbols = {}
endif

function UnicodeAirline()
    " unicode symbols
    let g:airline_left_sep = '¬ª'
    let g:airline_left_sep = '‚ñ∂'
    let g:airline_right_sep = '¬´'
    let g:airline_right_sep = '‚óÄ'
    let g:airline_symbols.crypt = 'üîí'
    let g:airline_symbols.linenr = '‚êä'
    let g:airline_symbols.linenr = '‚ê§'
    let g:airline_symbols.linenr = '¬∂'
    let g:airline_symbols.maxlinenr = '‚ò∞'
    let g:airline_symbols.maxlinenr = ''
    let g:airline_symbols.branch = '‚éá'
    let g:airline_symbols.paste = 'œÅ'
    let g:airline_symbols.paste = '√û'
    let g:airline_symbols.paste = '‚à•'
    let g:airline_symbols.spell = 'Íû®'
    let g:airline_symbols.notexists = '‚àÑ'
    let g:airline_symbols.whitespace = 'Œû'
endfunction

function PowerlineAirlineSymbols ()
    " powerline symbols
    let g:airline_left_sep = 'ÓÇ∞'
    let g:airline_left_alt_sep = 'ÓÇ±'
    let g:airline_right_sep = 'ÓÇ≤'
    let g:airline_right_alt_sep = 'ÓÇ≥'
    let g:airline_symbols.branch = 'ÓÇ†'
    let g:airline_symbols.readonly = 'ÓÇ¢'
    let g:airline_symbols.linenr = 'ÓÇ°'
endfunction

call PowerlineAirlineSymbols()

" Needed for airline to work preperly:
set encoding=utf-8
let g:airline_powerline_fonts = 1

" -----------------------------------------------------------
" ------------------------- Vimtex settings ------j-----------
" -----------------------------------------------------------
nnoremap <leader>ll :VimtexCompileSS<CR>
nnoremap <leader>lc :VimtexCompile<CR>
nnoremap <leader>le :VimtexErrors<CR>
nnoremap <leader>lv :VimtexView<CR>
